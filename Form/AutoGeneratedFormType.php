<?php
/*
 * This file was delivered to you as part of the YuccaInSituUpdaterBundle package.
 *
 * (c) RÃ©mi JANOT <r.janot@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Yucca\InSituUpdaterBundle\Form;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface;

/**
 * Class ArchitectSubscribeType
 * @package Fdf\Bundle\FdfBundle\Form\Type
 */
class AutoGeneratedFormType extends AbstractType
{
    protected $configuration;
    protected $securityAuthorizationChecker;
    protected $dataClass;
    protected $buildFormCallback;

    /**
     * @param callable $buildFormCallback
     */
    public function setBuildFormCallback(\Closure $buildFormCallback)
    {
        $this->buildFormCallback = $buildFormCallback;
    }

    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        if (isset($options['configuration']['entities'])) {
            foreach ($options['configuration']['entities'] as $entityConfiguration) {
                $name = 'entity--'.$entityConfiguration['name'];
                $builder
                    ->add(
                        $name,
                        self::class,
                        array(
                            'attr'=> array('class'=>'entity'),
                            'data_class' => $entityConfiguration['entity_class_name'],
                            'configuration' => $entityConfiguration,
                            'securityAuthorizationChecker' => $options['securityAuthorizationChecker']
                        )
                    );
            }
            $builder->add('Submit', SubmitType::class);
        }
        if (isset($options['configuration']['properties'])) {
            foreach ($options['configuration']['properties'] as $property) {
                if(false == empty($property['roles'])){
                    if(false == $options['securityAuthorizationChecker']->isGranted($property['roles'])) {
                        continue;
                    }
                }

                $builder
                    ->add(
                        $property['name'],
                        $property['type'],
                        array_merge(
                            array('attr'=> array('class'=>'property')),
                            $property['options']
                        )
                    )
                ;
            }
        }

        if ($this->buildFormCallback) {
            call_user_func_array($this->buildFormCallback, array($builder, $options));
        }
    }



    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => $this->dataClass,
            'translation_domain'=> 'in_situ',
            'configuration'=>array(),
            'securityAuthorizationChecker'=>null
        ));
    }

    /**
     * @return string
     */
    public function getBlockPrefix()
    {
        return 'yucca_in_situ_updater';
    }
}
